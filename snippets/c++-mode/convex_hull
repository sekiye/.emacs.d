# -*- mode: snippet -*-
# name: convex_hull
# key: convex_hull
# --
typedef complex<double> Point;

namespace std {
  bool operator<(const Point &a, const Point &b) {
    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);
  }
}

double cross(const Point &a, const Point &b) {
  return imag(conj(a) * b);
}

double dot(const Point &a, const Point &b) {
  return real(conj(a) * b);
}

double distance(const Point &a, const Point &b) {
  return abs(a - b);
}

int ccw(Point a, Point b, Point c) {
  b -= a; c -= a;
  if (cross(b, c) > 0)   return +1;       // counter clockwise
  if (cross(b, c) < 0)   return -1;       // clockwise
  if (dot(b, c) < 0)     return +2;       // c--a--b on line
  if (norm(b) < norm(c)) return -2;       // a--b--c on line
  return 0;
}

vector<Point> convex_hull(vector<Point> ps) {
  int n = ps.size();
  int k = 0;
  sort(ps.begin(), ps.end());
  vector<Point> ch(2*n);
  for (int i = 0; i < n; ch[k++] = ps[i++]) // lower-hull
    while (k >= 2 && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) --k;
  for (int i = n-2, t = k+1; i >= 0; ch[k++] = ps[i--]) // upper-hull
    while (k >= t && ccw(ch[k-2], ch[k-1], ps[i]) <= 0) --k;
  ch.resize(k-1);
  return move(ch);
}

double periphery(const vector<Point> &v) {
  double l = 0;
  for (int i = 0; i < (int)v.size(); i++) {
    l += distance(v[i], v[(i + 1) % v.size()]);
  }
  return l;
}
